# Stubs for autobahn.websocket.types (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class ConnectionRequest:
    peer: Any = ...
    headers: Any = ...
    host: Any = ...
    path: Any = ...
    params: Any = ...
    version: Any = ...
    origin: Any = ...
    protocols: Any = ...
    extensions: Any = ...
    def __init__(self, peer: Any, headers: Any, host: Any, path: Any, params: Any, version: Any, origin: Any, protocols: Any, extensions: Any) -> None: ...
    def __json__(self): ...

class ConnectingRequest:
    host: Any = ...
    port: Any = ...
    resource: Any = ...
    headers: Any = ...
    useragent: Any = ...
    origin: Any = ...
    protocols: Any = ...
    def __init__(self, host: Optional[Any] = ..., port: Optional[Any] = ..., resource: Optional[Any] = ..., headers: Optional[Any] = ..., useragent: Optional[Any] = ..., origin: Optional[Any] = ..., protocols: Optional[Any] = ...) -> None: ...
    def __json__(self): ...

class TransportDetails:
    peer: Any = ...
    is_secure: Any = ...
    secure_channel_id: Any = ...
    def __init__(self, peer: Any, is_secure: Any, secure_channel_id: Any) -> None: ...
    def __json__(self): ...

class ConnectionResponse:
    peer: Any = ...
    headers: Any = ...
    version: Any = ...
    protocol: Any = ...
    extensions: Any = ...
    def __init__(self, peer: Any, headers: Any, version: Any, protocol: Any, extensions: Any) -> None: ...
    def __json__(self): ...

class ConnectionAccept:
    subprotocol: Any = ...
    headers: Any = ...
    def __init__(self, subprotocol: Optional[Any] = ..., headers: Optional[Any] = ...) -> None: ...

class ConnectionDeny(Exception):
    BAD_REQUEST: int = ...
    FORBIDDEN: int = ...
    NOT_FOUND: int = ...
    NOT_ACCEPTABLE: int = ...
    REQUEST_TIMEOUT: int = ...
    INTERNAL_SERVER_ERROR: int = ...
    NOT_IMPLEMENTED: int = ...
    SERVICE_UNAVAILABLE: int = ...
    code: Any = ...
    reason: Any = ...
    def __init__(self, code: Any, reason: Optional[Any] = ...) -> None: ...

class Message: ...

class IncomingMessage(Message):
    payload: Any = ...
    is_binary: Any = ...
    def __init__(self, payload: Any, is_binary: bool = ...) -> None: ...

class OutgoingMessage(Message):
    payload: Any = ...
    is_binary: Any = ...
    skip_compress: Any = ...
    def __init__(self, payload: Any, is_binary: bool = ..., skip_compress: bool = ...) -> None: ...

class Ping:
    payload: Any = ...
    def __init__(self, payload: Optional[Any] = ...) -> None: ...
